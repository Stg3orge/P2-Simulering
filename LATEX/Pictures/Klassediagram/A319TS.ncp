<Project>
  <Name>A319TS</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>VejElementer</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Entity</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="163" height="94" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Point Position { get; set; }</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Destination</Name>
        <Access>Public</Access>
        <Location left="10" top="158" />
        <Size width="203" height="116" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public DestinationType Type { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>LightController</Name>
        <Access>Public</Access>
        <Location left="230" top="158" />
        <Size width="199" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">int _current</Member>
        <Member type="Field">int _counter</Member>
        <Member type="Property">public List&lt;Node&gt; Lights { get; set; }</Member>
        <Member type="Property">public int FirstTime { get; set; }</Member>
        <Member type="Property">public int SecondTime { get; set; }</Member>
        <Member type="Method">public void Update(int ms)</Member>
        <Member type="Method">public override string ToString()</Member>
        <Member type="Method">private void ToggleLights()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IPositionable</Name>
        <Access>Public</Access>
        <Location left="230" top="10" />
        <Size width="163" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Property">Point Position { get; set; }</Member>
      </Entity>
      <Entity type="Class">
        <Name>Node</Name>
        <Access>Public</Access>
        <Location left="443" top="10" />
        <Size width="262" height="196" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public NodeTypes Type { get; set; }</Member>
        <Member type="Property">public List&lt;Road&gt; Roads { get; set; }</Member>
        <Member type="Property">public Point Position { get; set; }</Member>
        <Member type="Property">public bool Green { get; set; }</Member>
        <Member type="Property">public List&lt;Vehicle&gt; IncommingVehicles { get; set; }</Member>
        <Member type="Property">public bool IsEmpty { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Enum">
        <Name>NodeTypes</Name>
        <Access>Public</Access>
        <Location left="443" top="216" />
        <Size width="162" height="180" />
        <Collapsed>False</Collapsed>
        <Value>None</Value>
        <Value>Yield</Value>
        <Value>Home</Value>
        <Value>Parking</Value>
        <Value>Light</Value>
        <Value>Inbound</Value>
        <Value>Outbound</Value>
      </Entity>
      <Entity type="Class">
        <Name>DestinationType</Name>
        <Access>Public</Access>
        <Location left="10" top="411" />
        <Size width="189" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Property">public Color Color { get; set; }</Member>
        <Member type="Property">public double Distribution { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>VehicleType</Name>
        <Access>Public</Access>
        <Location left="505" top="411" />
        <Size width="199" height="196" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Property">public int MaxSpeed { get; set; }</Member>
        <Member type="Property">public double Acceleration { get; set; }</Member>
        <Member type="Property">public double Deceleration { get; set; }</Member>
        <Member type="Property">public Color Color { get; set; }</Member>
        <Member type="Property">public double Distribution { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Vehicle</Name>
        <Access>Public</Access>
        <Location left="718" top="10" />
        <Size width="341" height="723" />
        <Collapsed>False</Collapsed>
        <Member type="Field">SimulationSetting _settings</Member>
        <Member type="Field">List&lt;Road&gt; _currenPath</Member>
        <Member type="Field">int _currentPathIndex</Member>
        <Member type="Field">Road _currentRoad</Member>
        <Member type="Field">List&lt;Node&gt; _nodesIncommingAt</Member>
        <Member type="Field">int _toDestTime</Member>
        <Member type="Field">bool _toDestStarted</Member>
        <Member type="Field">List&lt;Road&gt; _toDestPath</Member>
        <Member type="Field">int _toHomeTime</Member>
        <Member type="Field">bool _toHomeStarted</Member>
        <Member type="Field">List&lt;Road&gt; _toHomePath</Member>
        <Member type="Property">public Node Home { get; set; }</Member>
        <Member type="Property">public Destination Destination { get; set; }</Member>
        <Member type="Property">public PointD Position { get; set; }</Member>
        <Member type="Property">public VehicleType Type { get; set; }</Member>
        <Member type="Property">public bool Active { get; set; }</Member>
        <Member type="Property">public List&lt;PointD&gt; ToDestRecord { get; set; }</Member>
        <Member type="Property">public List&lt;PointD&gt; ToHomeRecord { get; set; }</Member>
        <Member type="Property">public double Speed { get; set; }</Member>
        <Member type="Property">private Node CurrentNode { get; set; }</Member>
        <Member type="Method">private Node FindEnd()</Member>
        <Member type="Method">private Node FindOutbound()</Member>
        <Member type="Method">private Node FindParking()</Member>
        <Member type="Method">public void Drive(int time)</Member>
        <Member type="Method">private void CheckActive()</Member>
        <Member type="Method">private void Activate(List&lt;Road&gt; path)</Member>
        <Member type="Method">private void Deactivate()</Member>
        <Member type="Method">private double GetSpeed()</Member>
        <Member type="Method">private Vehicle VehicleInfront(double distanceToCheck)</Member>
        <Member type="Method">private Vehicle CheckCurrentRoad(double distanceToCheck)</Member>
        <Member type="Method">private Vehicle CheckFutureRoad(int index, double distanceToCheck)</Member>
        <Member type="Method">private Vehicle GetClosestToStart(List&lt;Vehicle&gt; vehicles)</Member>
        <Member type="Method">private void TranslateVehicle(double distanceToMove)</Member>
        <Member type="Method">private void ControlOverreach()</Member>
        <Member type="Method">private void GoToNextRoad()</Member>
        <Member type="Method">private void ShowAsIncomming()</Member>
        <Member type="Method">private void SetIncomming()</Member>
        <Member type="Method">public VehicleData ExtractData()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IDistributable</Name>
        <Access>Public</Access>
        <Location left="264" top="411" />
        <Size width="189" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Property">double Distribution { get; set; }</Member>
      </Entity>
      <Entity type="Interface">
        <Name>IColorable</Name>
        <Access>Public</Access>
        <Location left="264" top="496" />
        <Size width="162" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Property">Color Color { get; set; }</Member>
      </Entity>
      <Entity type="Class">
        <Name>Road</Name>
        <Access>Public</Access>
        <Location left="10" top="598" />
        <Size width="214" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Node From { get; set; }</Member>
        <Member type="Property">public Node To { get; set; }</Member>
        <Member type="Property">public RoadType Type { get; set; }</Member>
        <Member type="Property">public Partitions Partition { get; set; }</Member>
        <Member type="Property">public List&lt;Vehicle&gt; Vehicles { get; set; }</Member>
        <Member type="Property">public double Length { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>RoadType</Name>
        <Access>Public</Access>
        <Location left="230" top="598" />
        <Size width="200" height="154" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Property">public int Speed { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Member type="Method">public int CompareTo(RoadType other)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IComparable</Name>
        <Access>Public</Access>
        <Location left="505" top="641" />
        <Size width="179" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Method">int CompareTo(object other)</Member>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Realization" first="4" second="3">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="0" second="3">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="2" second="0">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="1" second="0">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Realization" first="7" second="9">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="7" second="10">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="6" second="9">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="6" second="10">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="12" second="13">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>GUI</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>GUIMain</Name>
        <Access>Public</Access>
        <Location left="72" top="135" />
        <Size width="364" height="434" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Project CurrentProject</Member>
        <Member type="Field">public ToolController ToolController</Member>
        <Member type="Field">MenuStrip GUIMainMenuStrip</Member>
        <Member type="Field">ToolStrip GUIMainToolStrip</Member>
        <Member type="Field">private Viewport GUIMainViewport</Member>
        <Member type="Method">private void MenuFileNewClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuFileOpenClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuFileSaveClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuSettingsProjectClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuSettingsSimulationClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuSettingsDistributionClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuTypesDestinationsClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuTypesVehiclesClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuTypesRoadsClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuSimulationRunClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void MenuSimulationViewClick(object sender, Eventargs args)</Member>
        <Member type="Method">private void ToolClick(object sender, EventArgs args)</Member>
        <Member type="Method">public void UpdateTitle()</Member>
        <Member type="Method">public void UpdateProject(Project project)</Member>
        <Member type="Method">public void UpdateDestinationTypeSelect()</Member>
        <Member type="Method">public void UpdateRoadTypeSelect()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIMenuFileNew</Name>
        <Access>Public</Access>
        <Location left="444" top="135" />
        <Size width="276" height="179" />
        <Collapsed>False</Collapsed>
        <Member type="Field">TextBox ProjectName</Member>
        <Member type="Field">Label ProjectNameLabel</Member>
        <Member type="Field">Button Create</Member>
        <Member type="Property">public Project NewProject { get; set; }</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void CreateClick(object sender, EventArgs args)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIMenuSettingsProject</Name>
        <Access>Public</Access>
        <Location left="444" top="322" />
        <Size width="256" height="179" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private TextBox NameOfProject</Member>
        <Member type="Field">Label ProjectNameLabel</Member>
        <Member type="Field">Button Ok</Member>
        <Member type="Property">public Project Project { get; set; }</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void OkClick(object sender, EventArgs args)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIMenuSettingsSimulation</Name>
        <Access>Public</Access>
        <Location left="444" top="509" />
        <Size width="191" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIMenuSettingsDistribution</Name>
        <Access>Public</Access>
        <Location left="774" top="135" />
        <Size width="329" height="451" />
        <Collapsed>False</Collapsed>
        <Member type="Field">Project Project</Member>
        <Member type="Field">TabControl TabContainer</Member>
        <Member type="Field">TabPage TabDestinations</Member>
        <Member type="Field">TabPage TabVehicles</Member>
        <Member type="Field">DataGridView Destinations</Member>
        <Member type="Field">DataGridView Vehicles</Member>
        <Member type="Field">Label DestinationsLabel</Member>
        <Member type="Field">Label VehiclesLabel</Member>
        <Member type="Field">TextBox DestinationsPercent</Member>
        <Member type="Field">TextBox VehiclesPercent</Member>
        <Member type="Field">Button Save</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void OnSelectedChanged(object sender, EventArgs args)</Member>
        <Member type="Method">private void OnEditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs args)</Member>
        <Member type="Method">private void InputHandler(object sender, KeyPressEventArgs args)</Member>
        <Member type="Method">private void ReadData(object sender, EventArgs args)</Member>
        <Member type="Method">private void SetColors(DataGridView data)</Member>
        <Member type="Method">private void SaveData(object sender, EventArgs args)</Member>
        <Member type="Method">private void OnClosing(object sender, FormClosingEventArgs args)</Member>
        <Member type="Method">private double Sum(DataGridView data)</Member>
        <Member type="Method">private void UpdatePercentage()</Member>
        <Member type="Method">private void UpdatePercentage(object sender, EventArgs args)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Form</Name>
        <Access>Public</Access>
        <Location left="507" top="10" />
        <Size width="162" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIMenuSimulationRun</Name>
        <Access>Public</Access>
        <Location left="417" top="596" />
        <Size width="425" height="264" />
        <Collapsed>False</Collapsed>
        <Member type="Field">Project Project</Member>
        <Member type="Field">Simulation Simulation</Member>
        <Member type="Field">RichTextBox Information</Member>
        <Member type="Field">ProgressBar ProgressBar</Member>
        <Member type="Field">Label ProcessLabel</Member>
        <Member type="Field">Button Start</Member>
        <Member type="Field">Button Cancel</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void StartClick(object sender, EventArgs args)</Member>
        <Member type="Method">private void CancelClick(object sender, EventArgs args)</Member>
        <Member type="Method">private void WorkerProgressChanged(object sender, ProgressChangedEventArgs args)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIMenuSimulationView</Name>
        <Access>Public</Access>
        <Location left="72" top="583" />
        <Size width="332" height="536" />
        <Collapsed>False</Collapsed>
        <Member type="Field">Color CustomGreen</Member>
        <Member type="Field">Color CustomRed</Member>
        <Member type="Field">bool Started</Member>
        <Member type="Field">Panel SimContainer</Member>
        <Member type="Field">SimulationViewporrt SimViewport</Member>
        <Member type="Field">ProgressBar ProgressBar</Member>
        <Member type="Field">Button Open</Member>
        <Member type="Field">Label OpenLabel</Member>
        <Member type="Field">Button Primary</Member>
        <Member type="Field">Button Secondary</Member>
        <Member type="Field">Button StartStop</Member>
        <Member type="Field">ComboBox UpdateRate</Member>
        <Member type="Field">Label TimeLabel</Member>
        <Member type="Field">TextBox SetTimeTextBox</Member>
        <Member type="Field">Button SetTime</Member>
        <Member type="Field">Timer TimeTimer</Member>
        <Member type="Method">private void OpenClick(object sender, EventArgs args)</Member>
        <Member type="Method">private void ResetButtons()</Member>
        <Member type="Method">private void PrimaryClick(object sender, EventArgs args)</Member>
        <Member type="Method">private void SecondaryClick(object sender, EventArgs args)</Member>
        <Member type="Method">private void StartStopClick(object sender, EventArgs args)</Member>
        <Member type="Method">private void UpdateRateChanged(object sender, EventArgs args)</Member>
        <Member type="Method">private void SetTimeClick(object sender, EventArgs args)</Member>
        <Member type="Method">private void Tick(object sender, EventArgs args)</Member>
        <Member type="Method">private void OnLoad(object sender, EventArgs args)</Member>
        <Member type="Method">private int GetUpdateRate()</Member>
        <Member type="Method">private void Setup()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIMenuTypesDestinations</Name>
        <Access>Public</Access>
        <Location left="854" top="596" />
        <Size width="270" height="332" />
        <Collapsed>False</Collapsed>
        <Member type="Field">Project Project</Member>
        <Member type="Field">TextBox SetName</Member>
        <Member type="Field">Label NameLabel</Member>
        <Member type="Field">Button SetColor</Member>
        <Member type="Field">Button Add</Member>
        <Member type="Field">Button Remove</Member>
        <Member type="Field">DataGridView Destinations</Member>
        <Member type="Field">ColorDialog ColorPicker</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void ReadData(object sender, EventArgs args)</Member>
        <Member type="Method">private void RemoveClick(object sender, EventArgs e)</Member>
        <Member type="Method">private void AddClick(object sender, EventArgs e)</Member>
        <Member type="Method">private void AddDestinationType()</Member>
        <Member type="Method">private void ClickColor(object sender, EventArgs e)</Member>
        <Member type="Method">private void UpdateGridColors()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIMenuTypesVehicles</Name>
        <Access>Public</Access>
        <Location left="574" top="871" />
        <Size width="268" height="434" />
        <Collapsed>False</Collapsed>
        <Member type="Field">Project Project</Member>
        <Member type="Field">TextBox SetName</Member>
        <Member type="Field">NumericUpDown MaxSpeed</Member>
        <Member type="Field">NumericUpDown Acceleration</Member>
        <Member type="Field">NumericUpDown Deceleration</Member>
        <Member type="Field">Label NameLabel</Member>
        <Member type="Field">Label MaxSpeedLabel</Member>
        <Member type="Field">Label AccelerationLabel</Member>
        <Member type="Field">Label DecelerationLabel</Member>
        <Member type="Field">Button Add</Member>
        <Member type="Field">Button Remove</Member>
        <Member type="Field">Button SetColor</Member>
        <Member type="Field">DataGridView Vehicles</Member>
        <Member type="Field">ColorDialog ColorPicker</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void ReadData(object sender, EventArgs args)</Member>
        <Member type="Method">private void RemoveClick(object sender, EventArgs e)</Member>
        <Member type="Method">private void AddClick(object sender, EventArgs e)</Member>
        <Member type="Method">private void AddVehicleType()</Member>
        <Member type="Method">private void ClickColor(object sender, EventArgs e)</Member>
        <Member type="Method">private void UpdateGridColors()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIMenuTypesRoads</Name>
        <Access>Public</Access>
        <Location left="854" top="937" />
        <Size width="268" height="281" />
        <Collapsed>False</Collapsed>
        <Member type="Field">Project Project</Member>
        <Member type="Field">Label NameLabel</Member>
        <Member type="Field">Label SpeedLabel</Member>
        <Member type="Field">TextBox SetName</Member>
        <Member type="Field">NumericUpDown SetSpeed</Member>
        <Member type="Field">Button Add</Member>
        <Member type="Field">Button Remove</Member>
        <Member type="Field">DataGridView Roads</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void ReadData(object sender, EventArgs args)</Member>
        <Member type="Method">private void AddClick(object sender, EventArgs e)</Member>
        <Member type="Method">private void RemoveClick(object sender, EventArgs e)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Association" first="4" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>749</X>
          <Y>324</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>742</X>
          <Y>48</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="1" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>745</X>
          <Y>268</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="2" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>745</X>
          <Y>418</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>708</X>
          <Y>48</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="3" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>745</X>
          <Y>538</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>708</X>
          <Y>48</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="0" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>47</X>
          <Y>350</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="6" second="5">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>745</X>
          <Y>571</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>719</X>
          <Y>48</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="7" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>47</X>
          <Y>709</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>453</X>
          <Y>48</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="8" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1149</X>
          <Y>736</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>706</X>
          <Y>48</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="10" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1149</X>
          <Y>1091</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>712</X>
          <Y>48</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="9" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1149</X>
          <Y>1259</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>738</X>
          <Y>48</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>GUIEdit</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>GUIToolEditDestination</Name>
        <Access>Public</Access>
        <Location left="620" top="147" />
        <Size width="268" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Destination Destination</Member>
        <Member type="Field">public Project Project</Member>
        <Member type="Field">Label TypeLabel</Member>
        <Member type="Field">ComboBox Type</Member>
        <Member type="Method">private void SetSize(int width, int height)</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void ReadData(object sender, EventArgs args)</Member>
        <Member type="Method">private void SaveData(object sender, EventArgs args)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIToolEditLightController</Name>
        <Access>Public</Access>
        <Location left="327" top="147" />
        <Size width="282" height="298" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public LightController Controller</Member>
        <Member type="Field">Label FirstTimeLabel</Member>
        <Member type="Field">Label SecondTimeLabel</Member>
        <Member type="Field">NumericUpDown FirstTime</Member>
        <Member type="Field">NumericUpDown SecondTime</Member>
        <Member type="Field">Label LinksLabel</Member>
        <Member type="Field">DataGridView Links</Member>
        <Member type="Field">Button Remove</Member>
        <Member type="Method">private void SetSize(int width, int height)</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void ReadData(object sender, EventArgs args)</Member>
        <Member type="Method">private void SaveData(object sender, EventArgs args)</Member>
        <Member type="Method">private void RemoveClick(object sender, EventArgs args)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GUIToolEditNode</Name>
        <Access>Public</Access>
        <Location left="10" top="147" />
        <Size width="307" height="349" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Node Node</Member>
        <Member type="Field">public Project Project</Member>
        <Member type="Field">Label PositionLabel</Member>
        <Member type="Field">Label TypeLabel</Member>
        <Member type="Field">TextBox Position</Member>
        <Member type="Field">ComboBox Type</Member>
        <Member type="Field">CheckBox GreenCheck</Member>
        <Member type="Field">Label RoadsLabel</Member>
        <Member type="Field">DataGridView Roads</Member>
        <Member type="Field">Button Remove</Member>
        <Member type="Method">private void SetSize(int width, int height)</Member>
        <Member type="Method">private void Setup()</Member>
        <Member type="Method">private void ReadData(object sender, EventArgs args)</Member>
        <Member type="Method">private void SaveData(object sender, EventArgs args)</Member>
        <Member type="Method">private void RemoveRoadClick(object sender, EventArgs args)</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Form</Name>
        <Access>Public</Access>
        <Location left="384" top="10" />
        <Size width="162" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>Abstract</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Association" first="1" second="3">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="0" second="3">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="2" second="3">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Pathfinder</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Pathfinder</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="311" height="332" />
        <Collapsed>False</Collapsed>
        <Member type="Field">static int MaxSpeed</Member>
        <Member type="Field">static List&lt;Vertex&gt; Vertices</Member>
        <Member type="Field">static List&lt;Vertex&gt; Closed</Member>
        <Member type="Field">static List&lt;Vertex&gt; Open</Member>
        <Member type="Field">static Vertex Start</Member>
        <Member type="Field">static Vertex End</Member>
        <Member type="Method">public static void SetProject(Project project, Partitions partition)</Member>
        <Member type="Method">private static void ConvertNodes(Project project)</Member>
        <Member type="Method">private static void ConvertRoads(Project project, Partitions partition)</Member>
        <Member type="Method">private static void InitLists()</Member>
        <Member type="Method">private static void SetStartEnd(Node start, Node end)</Member>
        <Member type="Method">public static List&lt;Road&gt; FindPath(Node start, Node end)</Member>
        <Member type="Method">private static void MoveToClosed(Vertex vertex)</Member>
        <Member type="Method">private static void EstimateNeighbors(Vertex current)</Member>
        <Member type="Method">private static List&lt;Road&gt; TracePath()</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Vertex</Name>
        <Access>Public</Access>
        <Location left="329" top="10" />
        <Size width="456" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Node Source</Member>
        <Member type="Field">public List&lt;Edge&gt; Edges</Member>
        <Member type="Field">public Vertex Previous</Member>
        <Member type="Field">public double Cost</Member>
        <Member type="Field">public double Estimate</Member>
        <Member type="Method">public int CompareTo(Vertex other)</Member>
        <Member type="Method">public void CalculateCostEstimate(Vertex previous, Edge edge, Vertex end, int maxSpeed)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Edge</Name>
        <Access>Public</Access>
        <Location left="329" top="235" />
        <Size width="191" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Road Source</Member>
        <Member type="Field">public Vertex VertexFrom</Member>
        <Member type="Field">public Vertex VertexTo</Member>
        <Member type="Property">public double Cost { get; private set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IComparable</Name>
        <Access>Public</Access>
        <Location left="533" top="235" />
        <Size width="179" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Method">int CompareTo(object other)</Member>
      </Entity>
      <Entity type="Comment">
        <Text>Arver fra Road</Text>
        <Location left="451" top="286" />
        <Size width="63" height="50" />
      </Entity>
      <Entity type="Comment">
        <Text>Arver fra Node</Text>
        <Location left="716" top="61" />
        <Size width="63" height="50" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Realization" first="1" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>756</X>
          <Y>264</Y>
        </BendPoint>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Diverse</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Vector2D</Name>
        <Access>Public</Access>
        <Location left="751" top="198" />
        <Size width="198" height="162" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public double X { get; set; }</Member>
        <Member type="Property">public double Y { get; set; }</Member>
        <Member type="Method">public void Scale(double scalar)</Member>
        <Member type="Method">public void ToUnit()</Member>
        <Member type="Method">public static Vector2D FromRoad(Road road)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>VehicleData</Name>
        <Access>Public</Access>
        <Location left="751" top="10" />
        <Size width="198" height="179" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public VehicleType Type { get; }</Member>
        <Member type="Property">public PointD[] ToDestRecord { get; }</Member>
        <Member type="Property">public PointD[] ToHomeRecord { get; }</Member>
        <Member type="Property">public int ToDestTime { get; }</Member>
        <Member type="Property">public int ToHomeTime { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>MathExtension</Name>
        <Access>Public</Access>
        <Location left="492" top="198" />
        <Size width="247" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static double Distance(Point from, Point to)</Member>
        <Member type="Method">public static double Distance(PointD from, PointD to)</Member>
        <Member type="Method">public static double KmhToMms(double kmh)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>PointD</Name>
        <Access>Public</Access>
        <Location left="492" top="336" />
        <Size width="247" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public double X { get; set; }</Member>
        <Member type="Property">public double Y { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>SimulationData</Name>
        <Access>Public</Access>
        <Location left="492" top="10" />
        <Size width="247" height="179" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Project Project { get; }</Member>
        <Member type="Property">public List&lt;VehicleData&gt; PrimaryData { get; }</Member>
        <Member type="Property">public List&lt;VehicleData&gt; SecondaryData { get; }</Member>
        <Member type="Property">public DateTime Date { get; }</Member>
        <Member type="Property">public string Filename { get; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Project</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="231" height="230" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public string Name</Member>
        <Member type="Field">public List&lt;Node&gt; Nodes</Member>
        <Member type="Field">public List&lt;Destination&gt; Destinations</Member>
        <Member type="Field">public List&lt;LightController&gt; LightControllers</Member>
        <Member type="Field">public List&lt;RoadType&gt; RoadTypes</Member>
        <Member type="Field">public List&lt;DestinationType&gt; DestinationTypes</Member>
        <Member type="Field">public List&lt;VehicleType&gt; VehicleTypes</Member>
        <Member type="Field">public SimulationSettings Settings</Member>
        <Member type="Method">public object Clone()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Program</Name>
        <Access>Public</Access>
        <Location left="10" top="251" />
        <Size width="231" height="94" />
        <Collapsed>False</Collapsed>
        <Member type="Method">static void Main(string[] args)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>SimulationSettings</Name>
        <Access>Public</Access>
        <Location left="253" top="98" />
        <Size width="229" height="332" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public int StepSize { get; set; }</Member>
        <Member type="Property">public int VehicleSpace { get; set; }</Member>
        <Member type="Property">public int IncommingRange { get; set; }</Member>
        <Member type="Property">public int PrimaryCarCount { get; set; }</Member>
        <Member type="Property">public int PrimaryInbound { get; set; }</Member>
        <Member type="Property">public int PrimaryOutbound { get; set; }</Member>
        <Member type="Property">public int PrimaryToDestTime { get; set; }</Member>
        <Member type="Property">public int PrimaryToHomeTime { get; set; }</Member>
        <Member type="Property">public int PrimaryTimeSpread { get; set; }</Member>
        <Member type="Property">public int SecondaryCarCount { get; set; }</Member>
        <Member type="Property">public int SecondaryInbound { get; set; }</Member>
        <Member type="Property">public int SecondaryOutbound { get; set; }</Member>
        <Member type="Property">public int SecondaryToDestTime { get; set; }</Member>
        <Member type="Property">public int SecondaryToHomeTime { get; set; }</Member>
        <Member type="Property">public int SecondaryTimeSpread { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>ICloneable</Name>
        <Access>Public</Access>
        <Location left="280" top="10" />
        <Size width="162" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Method">object Clone()</Member>
      </Entity>
      <Entity type="Enum">
        <Name>Partitions</Name>
        <Access>Public</Access>
        <Location left="10" top="355" />
        <Size width="231" height="112" />
        <Collapsed>False</Collapsed>
        <Value>Shared</Value>
        <Value>Primary</Value>
        <Value>Secondary</Value>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Realization" first="5" second="8">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>267</X>
          <Y>42</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>257</X>
          <Y>42</Y>
        </BendPoint>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Funktionalitet</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>ToolController</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="317" height="485" />
        <Collapsed>False</Collapsed>
        <Member type="Field">Node _firstNode</Member>
        <Member type="Field">LightController _firstController</Member>
        <Member type="Field">IPositionable _firstMoveObject</Member>
        <Member type="Field">bool _firstNodeConnection</Member>
        <Member type="Field">bool _firstControllerConnection</Member>
        <Member type="Field">bool _firstMove</Member>
        <Member type="Field">public ToolStripButton ActiveTool</Member>
        <Member type="Field">public ToolStripItemCollection Tools</Member>
        <Member type="Field">public Viewport Viewport</Member>
        <Member type="Field">public Project Project</Member>
        <Member type="Property">public DestinationType SelectedDestinationType { get; }</Member>
        <Member type="Property">public RoadType SelectedRoadType { get; }</Member>
        <Member type="Method">public void ToggleTool(ToolStripButton clickedTool)</Member>
        <Member type="Method">private void ViewportClick(object sender, MouseEventArgs args)</Member>
        <Member type="Method">public void OnKeyDown(object sender, KeyEventArgs args)</Member>
        <Member type="Method">private void StopConnection()</Member>
        <Member type="Method">private void Add(Type type)</Member>
        <Member type="Method">private void SetNodeType(NodeTypes type)</Member>
        <Member type="Method">private void LinkLight()</Member>
        <Member type="Method">private void AddRoad(Partitions partition)</Member>
        <Member type="Method">private void Edit()</Member>
        <Member type="Method">private void Remove()</Member>
        <Member type="Method">private void RemoveNode(Node target)</Member>
        <Member type="Method">private void Move()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Simulation</Name>
        <Access>Public</Access>
        <Location left="338" top="10" />
        <Size width="430" height="519" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public const int MsInDay = 86400000</Member>
        <Member type="Field">public const int RecordInterval = 100</Member>
        <Member type="Field">int _primaryProgress</Member>
        <Member type="Field">int _secondaryProgress</Member>
        <Member type="Field">BackgroundWorker MasterWorker</Member>
        <Member type="Field">BackgroundWorker PrimaryWorker</Member>
        <Member type="Field">BackgroundWorker SecondaryWorker</Member>
        <Member type="Field">Project Project</Member>
        <Member type="Field">Project PrimaryProject</Member>
        <Member type="Field">Project SecondaryProject</Member>
        <Member type="Field">List&lt;Vehicle&gt; _primaryVehicles</Member>
        <Member type="Field">List&lt;Vehicle&gt; _secondaryVehicles</Member>
        <Member type="Event">public event EventHandler&lt;ProgressChangedEventArgs&gt; ProgressChanged</Member>
        <Member type="Method">protected virtual void OnProgressChanged()</Member>
        <Member type="Method">private void PrimaryProgressReport(object sender, ProgressChangedEventArgs args)</Member>
        <Member type="Method">private void SecondaryProgressReport(object sender, ProgressChangedEventArgs args)</Member>
        <Member type="Method">private void Simulate(object sender, DoWorkEventArgs args)</Member>
        <Member type="Method">private void Run(object sender, DoWorkEventArgs args)</Member>
        <Member type="Method">public void Start()</Member>
        <Member type="Method">public void Cancel()</Member>
        <Member type="Method">private void SimulationCompleted(object sender, RunWorkerCompletedEventArgs args)</Member>
        <Member type="Method">private List&lt;Vehicle&gt; CreateVehicles(Partitions partition)</Member>
        <Member type="Method">private List&lt;Node&gt; GetHomes(int carCount, int inbound)</Member>
        <Member type="Method">private List&lt;Destination&gt; GetDestinations(int carCount, int outbound)</Member>
        <Member type="Method">private List&lt;VehicleType&gt; GetVehicleTypes(int carCount)</Member>
        <Member type="Method">private List&lt;int&gt; GetTimes(int carCount, int spread, int startTime)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FileHandler</Name>
        <Access>Public</Access>
        <Location left="10" top="504" />
        <Size width="243" height="162" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static Project NewProject()</Member>
        <Member type="Method">public static Project OpenProject()</Member>
        <Member type="Method">public static void SaveProject(Project project)</Member>
        <Member type="Method">public static void SaveSimulation(SimulationData data)</Member>
        <Member type="Method">public static SimulationData OpenSimulation()</Member>
        <Modifier>Static</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Viewport</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Viewport</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="395" height="706" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public readonly int GridLength = 1000</Member>
        <Member type="Field">public readonly int GridSize = 16</Member>
        <Member type="Field">public readonly int EntitySize = 12</Member>
        <Member type="Field">public readonly int NodeSize = 8</Member>
        <Member type="Field">public Project Project</Member>
        <Member type="Field">public Point HoverConnection</Member>
        <Member type="Field">public Point MousePos</Member>
        <Member type="Field">private Point _viewPos</Member>
        <Member type="Field">public Layer Grid</Member>
        <Member type="Field">public Layer Connections</Member>
        <Member type="Field">public Layer Nodes</Member>
        <Member type="Field">public Layer Entities</Member>
        <Member type="Field">public Layer Information</Member>
        <Member type="Field">public Layer Input</Member>
        <Member type="Property">public Point GridPos { get; }</Member>
        <Member type="Property">public Point ViewPos { get; }</Member>
        <Member type="Property">public float Zoom { get; set; }</Member>
        <Member type="Method">public void Reset()</Member>
        <Member type="Method">private void SetZoom(float value)</Member>
        <Member type="Method">private void SetViewPos(Point value)</Member>
        <Member type="Method">private Point GetGridPos()</Member>
        <Member type="Method">private void OnMove(object sender, MouseEventArgs args)</Member>
        <Member type="Method">private void OnWheel(object sender, MouseEventArgs args)</Member>
        <Member type="Method">public object GetObjByGridPos()</Member>
        <Member type="Method">private void InitControls()</Member>
        <Member type="Method">private Point GetDrawPosition(Point position)</Member>
        <Member type="Method">protected void ScaleTranslateSmooth(SmoothingMode mode, PaintEventArgs args)</Member>
        <Member type="Method">protected void DrawGrid(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawConnections(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawRoad(Road road, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawNodes(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawNode(Brush fill, Point position, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawArrow(Node node, bool left, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawEntities(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawLightController(Point position, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawDestination(Color color, Point position, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawInformation(object sender, PaintEventArgs args)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>SimulationViewPort</Name>
        <Access>Public</Access>
        <Location left="414" top="10" />
        <Size width="399" height="230" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private const int VehicleSize = 16</Member>
        <Member type="Field">public Layer Vehicles</Member>
        <Member type="Field">public SimulationData SimData</Member>
        <Member type="Field">public Partitions CurrentPartition</Member>
        <Member type="Property">public int Time { get; set; }</Member>
        <Member type="Method">private void DrawVehicles(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawVehicle(VehicleData vehicle, bool toDest, PaintEventArgs args)</Member>
        <Member type="Method">private PointF GetDrawPosition(PointD position)</Member>
        <Member type="Method">private int GetRecordIndex(int recordStartTime)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Entity</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Entity</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="163" height="94" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Point Position { get; set; }</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Destination</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Destination</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="203" height="116" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public DestinationType Type { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>LightController</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>LightController</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="199" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">int _current</Member>
        <Member type="Field">int _counter</Member>
        <Member type="Property">public List&lt;Node&gt; Lights { get; set; }</Member>
        <Member type="Property">public int FirstTime { get; set; }</Member>
        <Member type="Property">public int SecondTime { get; set; }</Member>
        <Member type="Method">public void Update(int ms)</Member>
        <Member type="Method">public override string ToString()</Member>
        <Member type="Method">private void ToggleLights()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Node</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Node</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="262" height="196" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public NodeTypes Type { get; set; }</Member>
        <Member type="Property">public List&lt;Road&gt; Roads { get; set; }</Member>
        <Member type="Property">public Point Position { get; set; }</Member>
        <Member type="Property">public bool Green { get; set; }</Member>
        <Member type="Property">public List&lt;Vehicle&gt; IncommingVehicles { get; set; }</Member>
        <Member type="Property">public bool IsEmpty { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Vehicle</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Vehicle</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="175" height="723" />
        <Collapsed>False</Collapsed>
        <Member type="Field">SimulationSetting _settings</Member>
        <Member type="Field">List&lt;Road&gt; _currenPath</Member>
        <Member type="Field">int _currentPathIndex</Member>
        <Member type="Field">Road _currentRoad</Member>
        <Member type="Field">List&lt;Node&gt; _nodesIncommingAt</Member>
        <Member type="Field">int _toDestTime</Member>
        <Member type="Field">bool _toDestStarted</Member>
        <Member type="Field">List&lt;Road&gt; _toDestPath</Member>
        <Member type="Field">int _toHomeTime</Member>
        <Member type="Field">bool _toHomeStarted</Member>
        <Member type="Field">List&lt;Road&gt; _toHomePath</Member>
        <Member type="Property">public Node Home { get; set; }</Member>
        <Member type="Property">public Destination Destination { get; set; }</Member>
        <Member type="Property">public PointD Position { get; set; }</Member>
        <Member type="Property">public VehicleType Type { get; set; }</Member>
        <Member type="Property">public bool Active { get; set; }</Member>
        <Member type="Property">public List&lt;PointD&gt; ToDestRecord { get; set; }</Member>
        <Member type="Property">public List&lt;PointD&gt; ToHomeRecord { get; set; }</Member>
        <Member type="Property">public double Speed { get; set; }</Member>
        <Member type="Property">private Node CurrentNode { get; set; }</Member>
        <Member type="Method">private Node FindEnd()</Member>
        <Member type="Method">private Node FindOutbound()</Member>
        <Member type="Method">private Node FindParking()</Member>
        <Member type="Method">public void Drive(int time)</Member>
        <Member type="Method">private void CheckActive()</Member>
        <Member type="Method">private void Activate(List&lt;Road&gt; path)</Member>
        <Member type="Method">private void Deactivate()</Member>
        <Member type="Method">private double GetSpeed()</Member>
        <Member type="Method">private Vehicle VehicleInfront(double distanceToCheck)</Member>
        <Member type="Method">private Vehicle CheckCurrentRoad(double distanceToCheck)</Member>
        <Member type="Method">private Vehicle CheckFutureRoad(int index, double distanceToCheck)</Member>
        <Member type="Method">private Vehicle GetClosestToStart(List&lt;Vehicle&gt; vehicles)</Member>
        <Member type="Method">private void TranslateVehicle(double distanceToMove)</Member>
        <Member type="Method">private void ControlOverreach()</Member>
        <Member type="Method">private void GoToNextRoad()</Member>
        <Member type="Method">private void ShowAsIncomming()</Member>
        <Member type="Method">private void SetIncomming()</Member>
        <Member type="Method">public VehicleData ExtractData()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>DestinationType</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>DestinationType</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="189" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Property">public Color Color { get; set; }</Member>
        <Member type="Property">public double Distribution { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>VehicleType</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>VehicleType</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="199" height="196" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Property">public int MaxSpeed { get; set; }</Member>
        <Member type="Property">public double Acceleration { get; set; }</Member>
        <Member type="Property">public double Deceleration { get; set; }</Member>
        <Member type="Property">public Color Color { get; set; }</Member>
        <Member type="Property">public double Distribution { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>RoadType</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>RoadType</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="200" height="154" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Property">public int Speed { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Member type="Method">public int CompareTo(RoadType other)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Road</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Road</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="209" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Node From { get; set; }</Member>
        <Member type="Property">public Node To { get; set; }</Member>
        <Member type="Property">public RoadType Type { get; set; }</Member>
        <Member type="Property">public Partitions Partition { get; set; }</Member>
        <Member type="Property">public List&lt;Vehicle&gt; Vehicles { get; set; }</Member>
        <Member type="Property">public double Length { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Pathfinder</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Pathfinder</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="162" height="332" />
        <Collapsed>False</Collapsed>
        <Member type="Field">static int MaxSpeed</Member>
        <Member type="Field">static List&lt;Vertex&gt; Vertices</Member>
        <Member type="Field">static List&lt;Vertex&gt; Closed</Member>
        <Member type="Field">static List&lt;Vertex&gt; Open</Member>
        <Member type="Field">static Vertex Start</Member>
        <Member type="Field">static Vertex End</Member>
        <Member type="Method">public static void SetProject(Project project, Partitions partition)</Member>
        <Member type="Method">private static void ConvertNodes(Project project)</Member>
        <Member type="Method">private static void ConvertRoads(Project project, Partitions partition)</Member>
        <Member type="Method">private static void InitLists()</Member>
        <Member type="Method">private static void SetStartEnd(Node start, Node end)</Member>
        <Member type="Method">public static List&lt;Road&gt; FindPath(Node start, Node end)</Member>
        <Member type="Method">private static void MoveToClosed(Vertex vertex)</Member>
        <Member type="Method">private static void EstimateNeighbors(Vertex current)</Member>
        <Member type="Method">private static List&lt;Road&gt; TracePath()</Member>
        <Modifier>Static</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Vertex</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Vertex</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Node Source</Member>
        <Member type="Field">public List&lt;Edge&gt; Edges</Member>
        <Member type="Field">public Vertex Previous</Member>
        <Member type="Field">public double Cost</Member>
        <Member type="Field">public double Estimate</Member>
        <Member type="Method">public int CompareTo(Vertex other)</Member>
        <Member type="Method">public void CalculateCostEstimate(Vertex previous, Edge edge, Vertex end, int maxSpeed)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Edge</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Edge</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="162" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Road Source</Member>
        <Member type="Field">public Vertex VertexFrom</Member>
        <Member type="Field">public Vertex VertexTo</Member>
        <Member type="Property">public double Cost { get; private set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Project</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Project</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="231" height="230" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public string Name</Member>
        <Member type="Field">public List&lt;Node&gt; Nodes</Member>
        <Member type="Field">public List&lt;Destination&gt; Destinations</Member>
        <Member type="Field">public List&lt;LightController&gt; LightControllers</Member>
        <Member type="Field">public List&lt;RoadType&gt; RoadTypes</Member>
        <Member type="Field">public List&lt;DestinationType&gt; DestinationTypes</Member>
        <Member type="Field">public List&lt;VehicleType&gt; VehicleTypes</Member>
        <Member type="Field">public SimulationSettings Settings</Member>
        <Member type="Method">public object Clone()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>SimulationSettings</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>SimulationSettings</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="229" height="332" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public int StepSize { get; set; }</Member>
        <Member type="Property">public int VehicleSpace { get; set; }</Member>
        <Member type="Property">public int IncommingRange { get; set; }</Member>
        <Member type="Property">public int PrimaryCarCount { get; set; }</Member>
        <Member type="Property">public int PrimaryInbound { get; set; }</Member>
        <Member type="Property">public int PrimaryOutbound { get; set; }</Member>
        <Member type="Property">public int PrimaryToDestTime { get; set; }</Member>
        <Member type="Property">public int PrimaryToHomeTime { get; set; }</Member>
        <Member type="Property">public int PrimaryTimeSpread { get; set; }</Member>
        <Member type="Property">public int SecondaryCarCount { get; set; }</Member>
        <Member type="Property">public int SecondaryInbound { get; set; }</Member>
        <Member type="Property">public int SecondaryOutbound { get; set; }</Member>
        <Member type="Property">public int SecondaryToDestTime { get; set; }</Member>
        <Member type="Property">public int SecondaryToHomeTime { get; set; }</Member>
        <Member type="Property">public int SecondaryTimeSpread { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>SimulationData</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>SimulationData</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="247" height="179" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Project Project { get; }</Member>
        <Member type="Property">public List&lt;VehicleData&gt; PrimaryData { get; }</Member>
        <Member type="Property">public List&lt;VehicleData&gt; SecondaryData { get; }</Member>
        <Member type="Property">public DateTime Date { get; }</Member>
        <Member type="Property">public string Filename { get; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>VehicleData</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>VehicleData</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="198" height="179" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public VehicleType Type { get; }</Member>
        <Member type="Property">public PointD[] ToDestRecord { get; }</Member>
        <Member type="Property">public PointD[] ToHomeRecord { get; }</Member>
        <Member type="Property">public int ToDestTime { get; }</Member>
        <Member type="Property">public int ToHomeTime { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>MathExtension</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>MathExtension</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="247" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static double Distance(Point from, Point to)</Member>
        <Member type="Method">public static double Distance(PointD from, PointD to)</Member>
        <Member type="Method">public static double KmhToMms(double kmh)</Member>
        <Modifier>Static</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Vector2D</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Vector2D</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="198" height="162" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public double X { get; set; }</Member>
        <Member type="Property">public double Y { get; set; }</Member>
        <Member type="Method">public void Scale(double scalar)</Member>
        <Member type="Method">public void ToUnit()</Member>
        <Member type="Method">public static Vector2D FromRoad(Road road)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>PointD</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>PointD</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="162" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public double X { get; set; }</Member>
        <Member type="Property">public double Y { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>ToolController</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>ToolController</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="197" height="485" />
        <Collapsed>False</Collapsed>
        <Member type="Field">Node _firstNode</Member>
        <Member type="Field">LightController _firstController</Member>
        <Member type="Field">IPositionable _firstMoveObject</Member>
        <Member type="Field">bool _firstNodeConnection</Member>
        <Member type="Field">bool _firstControllerConnection</Member>
        <Member type="Field">bool _firstMove</Member>
        <Member type="Field">public ToolStripButton ActiveTool</Member>
        <Member type="Field">public ToolStripItemCollection Tools</Member>
        <Member type="Field">public Viewport Viewport</Member>
        <Member type="Field">public Project Project</Member>
        <Member type="Property">public DestinationType SelectedDestinationType { get; }</Member>
        <Member type="Property">public RoadType SelectedRoadType { get; }</Member>
        <Member type="Method">public void ToggleTool(ToolStripButton clickedTool)</Member>
        <Member type="Method">private void ViewportClick(object sender, MouseEventArgs args)</Member>
        <Member type="Method">public void OnKeyDown(object sender, KeyEventArgs args)</Member>
        <Member type="Method">private void StopConnection()</Member>
        <Member type="Method">private void Add(Type type)</Member>
        <Member type="Method">private void SetNodeType(NodeTypes type)</Member>
        <Member type="Method">private void LinkLight()</Member>
        <Member type="Method">private void AddRoad(Partitions partition)</Member>
        <Member type="Method">private void Edit()</Member>
        <Member type="Method">private void Remove()</Member>
        <Member type="Method">private void RemoveNode(Node target)</Member>
        <Member type="Method">private void Move()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Simulation</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Simulation</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="214" height="519" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public const int MsInDay = 86400000</Member>
        <Member type="Field">public const int RecordInterval = 100</Member>
        <Member type="Field">int _primaryProgress</Member>
        <Member type="Field">int _secondaryProgress</Member>
        <Member type="Field">BackgroundWorker MasterWorker</Member>
        <Member type="Field">BackgroundWorker PrimaryWorker</Member>
        <Member type="Field">BackgroundWorker SecondaryWorker</Member>
        <Member type="Field">Project Project</Member>
        <Member type="Field">Project PrimaryProject</Member>
        <Member type="Field">Project SecondaryProject</Member>
        <Member type="Field">List&lt;Vehicle&gt; _primaryVehicles</Member>
        <Member type="Field">List&lt;Vehicle&gt; _secondaryVehicles</Member>
        <Member type="Event">public event EventHandler&lt;ProgressChangedEventArgs&gt; ProgressChanged</Member>
        <Member type="Method">protected virtual void OnProgressChanged()</Member>
        <Member type="Method">private void PrimaryProgressReport(object sender, ProgressChangedEventArgs args)</Member>
        <Member type="Method">private void SecondaryProgressReport(object sender, ProgressChangedEventArgs args)</Member>
        <Member type="Method">private void Simulate(object sender, DoWorkEventArgs args)</Member>
        <Member type="Method">private void Run(object sender, DoWorkEventArgs args)</Member>
        <Member type="Method">public void Start()</Member>
        <Member type="Method">public void Cancel()</Member>
        <Member type="Method">private void SimulationCompleted(object sender, RunWorkerCompletedEventArgs args)</Member>
        <Member type="Method">private List&lt;Vehicle&gt; CreateVehicles(Partitions partition)</Member>
        <Member type="Method">private List&lt;Node&gt; GetHomes(int carCount, int inbound)</Member>
        <Member type="Method">private List&lt;Destination&gt; GetDestinations(int carCount, int outbound)</Member>
        <Member type="Method">private List&lt;VehicleType&gt; GetVehicleTypes(int carCount)</Member>
        <Member type="Method">private List&lt;int&gt; GetTimes(int carCount, int spread, int startTime)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>FileHandler</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>FileHandler</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="243" height="162" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static Project NewProject()</Member>
        <Member type="Method">public static Project OpenProject()</Member>
        <Member type="Method">public static void SaveProject(Project project)</Member>
        <Member type="Method">public static void SaveSimulation(SimulationData data)</Member>
        <Member type="Method">public static SimulationData OpenSimulation()</Member>
        <Modifier>Static</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Viewport</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Viewport</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="162" height="706" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public readonly int GridLength = 1000</Member>
        <Member type="Field">public readonly int GridSize = 16</Member>
        <Member type="Field">public readonly int EntitySize = 12</Member>
        <Member type="Field">public readonly int NodeSize = 8</Member>
        <Member type="Field">public Project Project</Member>
        <Member type="Field">public Point HoverConnection</Member>
        <Member type="Field">public Point MousePos</Member>
        <Member type="Field">private Point _viewPos</Member>
        <Member type="Field">public Layer Grid</Member>
        <Member type="Field">public Layer Connections</Member>
        <Member type="Field">public Layer Nodes</Member>
        <Member type="Field">public Layer Entities</Member>
        <Member type="Field">public Layer Information</Member>
        <Member type="Field">public Layer Input</Member>
        <Member type="Property">public Point GridPos { get; }</Member>
        <Member type="Property">public Point ViewPos { get; }</Member>
        <Member type="Property">public float Zoom { get; set; }</Member>
        <Member type="Method">public void Reset()</Member>
        <Member type="Method">private void SetZoom(float value)</Member>
        <Member type="Method">private void SetViewPos(Point value)</Member>
        <Member type="Method">private Point GetGridPos()</Member>
        <Member type="Method">private void OnMove(object sender, MouseEventArgs args)</Member>
        <Member type="Method">private void OnWheel(object sender, MouseEventArgs args)</Member>
        <Member type="Method">public object GetObjByGridPos()</Member>
        <Member type="Method">private void InitControls()</Member>
        <Member type="Method">private Point GetDrawPosition(Point position)</Member>
        <Member type="Method">protected void ScaleTranslateSmooth(SmoothingMode mode, PaintEventArgs args)</Member>
        <Member type="Method">protected void DrawGrid(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawConnections(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawRoad(Road road, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawNodes(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawNode(Brush fill, Point position, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawArrow(Node node, bool left, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawEntities(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawLightController(Point position, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawDestination(Color color, Point position, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawInformation(object sender, PaintEventArgs args)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>SimulationViewport</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>SimulationViewPort</Name>
        <Access>Public</Access>
        <Location left="10" top="10" />
        <Size width="237" height="230" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private const int VehicleSize = 16</Member>
        <Member type="Field">public Layer Vehicles</Member>
        <Member type="Field">public SimulationData SimData</Member>
        <Member type="Field">public Partitions CurrentPartition</Member>
        <Member type="Property">public int Time { get; set; }</Member>
        <Member type="Method">private void DrawVehicles(object sender, PaintEventArgs args)</Member>
        <Member type="Method">private void DrawVehicle(VehicleData vehicle, bool toDest, PaintEventArgs args)</Member>
        <Member type="Method">private PointF GetDrawPosition(PointD position)</Member>
        <Member type="Method">private int GetRecordIndex(int recordStartTime)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
</Project>